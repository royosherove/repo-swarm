#!/usr/bin/env python3
"""
Test script for the save_to_arch_hub activity.

This script tests the save_to_arch_hub activity with a dummy file to help debug
any issues with the architecture hub functionality.
"""

import os
import sys
import asyncio
import tempfile
import json
from datetime import datetime

# Add src to path so we can import our modules
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'src'))

from activities.investigate_activities import save_to_arch_hub
from investigator.core.git_manager import GitRepositoryManager
from investigator.core.config import Config

class ArchHubTester:
    """Tests the save_to_arch_hub activity functionality."""

    def __init__(self):
        self.logger = self._create_logger()

    def _create_logger(self):
        """Create a simple logger for testing."""
        import logging
        logger = logging.getLogger('arch-hub-tester')
        logger.setLevel(logging.INFO)
        if not logger.handlers:
            handler = logging.StreamHandler()
            handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
            logger.addHandler(handler)
        return logger

    async def test_save_to_arch_hub(self):
        """Test the save_to_arch_hub activity with a dummy file."""
        print("üîç TESTING SAVE TO ARCH HUB ACTIVITY")
        print("=" * 50)

        # Check environment variables first
        if not os.getenv('GITHUB_TOKEN'):
            print("‚ùå GITHUB_TOKEN environment variable is required")
            return False

        if not os.getenv('ANTHROPIC_API_KEY'):
            print("‚ö†Ô∏è  ANTHROPIC_API_KEY not set, but may not be needed for this test")

        # Show current configuration
        print("üìã Current Configuration:")
        print(f"  Architecture Hub URL: {Config.get_arch_hub_repo_url()}")
        print(f"  Architecture Hub Name: {os.getenv('ARCH_HUB_REPO_NAME', Config.ARCH_HUB_REPO_NAME)}")
        print(f"  Architecture Hub Base: {os.getenv('ARCH_HUB_BASE_URL', Config.ARCH_HUB_BASE_URL)}")
        print(f"  Files Directory: {os.getenv('ARCH_HUB_FILES_DIR', Config.ARCH_HUB_FILES_DIR)}")

        # Create dummy architecture files
        print("\nüìù Creating dummy architecture files...")
        dummy_files = self._create_dummy_arch_files()

        print(f"Created {len(dummy_files)} dummy files:")
        for i, file_info in enumerate(dummy_files, 1):
            print(f"  {i}. {file_info['repo_name']}")

        # Test the activity
        print("\nüöÄ Testing save_to_arch_hub activity...")
        try:
            result = await save_to_arch_hub(dummy_files)

            print("‚úÖ Activity completed successfully!")
            print(f"Status: {result.get('status')}")
            print(f"Message: {result.get('message')}")
            print(f"Files saved: {len(result.get('files_saved', []))}")
            print(f"Repository: {result.get('repository')}")

            if result.get('files_saved'):
                print("Files saved:")
                for file_path in result.get('files_saved', []):
                    print(f"  - {file_path}")

            return True

        except Exception as e:
            print(f"‚ùå Activity failed with error: {str(e)}")
            print(f"Error type: {type(e).__name__}")
            import traceback
            print("Full traceback:")
            traceback.print_exc()
            return False

    def _create_dummy_arch_files(self):
        """Create dummy architecture files for testing."""
        dummy_files = []

        # Create a few dummy repositories with architecture content
        test_repos = [
            {
                "name": "test-repo-1",
                "content": """# Architecture Analysis: test-repo-1

## Overview
This is a dummy repository created for testing the architecture hub save functionality.

## Components
- Dummy Component A
- Dummy Component B
- Dummy Component C

## Dependencies
- None (dummy)

## Analysis Date
{datetime}

---
*Generated by RepoSwarm Test Script*
"""
            },
            {
                "name": "test-repo-2",
                "content": """# Architecture Analysis: test-repo-2

## Overview
This is another dummy repository for testing purposes.

## System Architecture
This repository demonstrates a simple microservices architecture with the following services:

### Services
1. **API Gateway** - Handles external requests
2. **User Service** - Manages user data
3. **Notification Service** - Handles notifications

## Technology Stack
- Backend: Python/FastAPI
- Database: PostgreSQL
- Cache: Redis
- Message Queue: RabbitMQ

## Analysis Date
{datetime}

---
*Generated by RepoSwarm Test Script*
"""
            }
        ]

        for repo in test_repos:
            current_time = datetime.now().isoformat()
            content = repo["content"].format(datetime=current_time)
            dummy_files.append({
                "repo_name": repo["name"],
                "arch_file_content": content
            })

        return dummy_files


async def main():
    """Main entry point for testing."""
    tester = ArchHubTester()
    success = await tester.test_save_to_arch_hub()

    if success:
        print("\nüéâ Test completed successfully!")
        sys.exit(0)
    else:
        print("\nüí• Test failed!")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
